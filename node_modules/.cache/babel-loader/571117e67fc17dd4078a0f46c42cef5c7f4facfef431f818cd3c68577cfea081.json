{"ast":null,"code":"var _jsxFileName = \"/Users/osanborn/Documents/rbpscan/src/components/SangerAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst Analysis = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [guideSeq, setGuideSeq] = useState('TTAGATTAGATTAGATTAGATTAGATTAGATTAGAC');\n  const [metadata, setMetadata] = useState([]);\n  const [results, setResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [processingStatus, setProcessingStatus] = useState('');\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n  const handleFileUpload = event => {\n    const uploadedFiles = Array.from(event.target.files);\n    const validFiles = uploadedFiles.filter(file => file.name.endsWith('.ab1') && file.size <= 10 * 1024 * 1024);\n    if (validFiles.length !== uploadedFiles.length) {\n      setError('Some files are invalid. Please upload .ab1 files under 10MB.');\n      return;\n    }\n    setFiles(validFiles);\n    setMetadata(validFiles.map(file => ({\n      fileName: file.name,\n      group: '',\n      replicate: '1'\n    })));\n    setError(null);\n    setResults(null);\n  };\n  const handleMetadataChange = (index, field, value) => {\n    const newMetadata = [...metadata];\n    newMetadata[index][field] = value;\n    setMetadata(newMetadata);\n  };\n  const validateInput = () => {\n    if (!/^[ATCG]+$/.test(guideSeq)) {\n      setError('Guide sequence must contain only A, T, C, G characters.');\n      return false;\n    }\n    const missingGroups = metadata.some(m => !m.group.trim());\n    if (missingGroups) {\n      setError('Each file must have a group assigned.');\n      return false;\n    }\n    return true;\n  };\n  const processFiles = async () => {\n    if (!validateInput()) return;\n    setLoading(true);\n    setError(null);\n    setProcessingStatus('Uploading and analyzing files...');\n    try {\n      const formData = new FormData();\n      files.forEach(file => formData.append('files', file));\n      formData.append('guide_seq', guideSeq);\n      formData.append('groups', JSON.stringify(metadata.map(m => m.group)));\n      formData.append('replicates', JSON.stringify(metadata.map(m => m.replicate)));\n      const response = await fetch(`${API_URL}/analyze`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Server error');\n      }\n      const data = await response.json();\n      console.log(\"ðŸ“¤ Raw R output:\", data);\n      const groupedData = data.reduce((acc, d) => {\n        if (d.Error || isNaN(d.Mean_edit)) return acc;\n        const group = d.Group || 'Unknown';\n        if (!acc[group]) acc[group] = {\n          total: 0,\n          count: 0,\n          samples: []\n        };\n        acc[group].total += d.Mean_edit;\n        acc[group].count++;\n        acc[group].samples.push({\n          file: d.File,\n          replicate: d.Replicate,\n          value: d.Mean_edit\n        });\n        return acc;\n      }, {});\n      const barData = Object.entries(groupedData).map(([group, {\n        total,\n        count,\n        samples\n      }]) => ({\n        group,\n        mean_edit: total / count,\n        sampleCount: count,\n        samples\n      }));\n      setResults({\n        labels: barData.map(d => d.group),\n        datasets: [{\n          label: 'Mean Editing (%)',\n          data: barData.map(d => d.mean_edit),\n          backgroundColor: '#C00000',\n          borderColor: '#C00000',\n          borderWidth: 1\n        }],\n        rawData: barData\n      });\n    } catch (err) {\n      console.error(err);\n      setError(`Error: ${err.message}`);\n    } finally {\n      setLoading(false);\n      setProcessingStatus('');\n    }\n  };\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: 'Editing by Group',\n        color: '#C00000'\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            const value = context.parsed.y.toFixed(2);\n            const rawData = results.rawData[context.dataIndex];\n            return [`Mean Editing: ${value}%`, `Samples: ${rawData.sampleCount}`];\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Editing (%)'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Group'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: '#C00000'\n      },\n      children: \"Analyze Sanger Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Guide Sequence:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: guideSeq,\n      onChange: e => setGuideSeq(e.target.value.toUpperCase())\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Upload .ab1 Files:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      accept: \".ab1\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), metadata.map((meta, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: meta.fileName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Group\",\n        value: meta.group,\n        onChange: e => handleMetadataChange(idx, 'group', e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Replicate\",\n        value: meta.replicate,\n        onChange: e => handleMetadataChange(idx, 'replicate', e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, idx, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: processFiles,\n      disabled: loading,\n      children: loading ? 'Processing...' : 'Analyze'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), processingStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: processingStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 28\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }, this), results && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Bar, {\n        data: results,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 24\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 38\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Replicate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 51\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Editing (%)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 69\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: results.rawData.flatMap(group => group.samples.map((s, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: group.group\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: s.file\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: s.replicate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: s.value.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 19\n            }, this)]\n          }, `${group.group}-${s.file}-${i}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(Analysis, \"7dlS30TVKGZBIYB/7EYpSJZulRk=\");\n_c = Analysis;\nexport default Analysis;\nvar _c;\n$RefreshReg$(_c, \"Analysis\");","map":{"version":3,"names":["React","useState","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","Fragment","_Fragment","register","Analysis","_s","files","setFiles","guideSeq","setGuideSeq","metadata","setMetadata","results","setResults","loading","setLoading","error","setError","processingStatus","setProcessingStatus","API_URL","process","env","REACT_APP_API_URL","handleFileUpload","event","uploadedFiles","Array","from","target","validFiles","filter","file","name","endsWith","size","length","map","fileName","group","replicate","handleMetadataChange","index","field","value","newMetadata","validateInput","test","missingGroups","some","m","trim","processFiles","formData","FormData","forEach","append","JSON","stringify","response","fetch","method","body","ok","errorData","json","Error","data","console","log","groupedData","reduce","acc","d","isNaN","Mean_edit","Group","total","count","samples","push","File","Replicate","barData","Object","entries","mean_edit","sampleCount","labels","datasets","label","backgroundColor","borderColor","borderWidth","rawData","err","message","chartOptions","responsive","plugins","legend","display","title","text","color","tooltip","callbacks","context","parsed","y","toFixed","dataIndex","scales","beginAtZero","x","className","style","padding","children","_jsxFileName","lineNumber","columnNumber","type","onChange","e","toUpperCase","multiple","accept","meta","idx","placeholder","onClick","disabled","options","flatMap","s","i","_c","$RefreshReg$"],"sources":["/Users/osanborn/Documents/rbpscan/src/components/SangerAnalysis.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport '../App.css';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nconst Analysis = () => {\n  const [files, setFiles] = useState([]);\n  const [guideSeq, setGuideSeq] = useState('TTAGATTAGATTAGATTAGATTAGATTAGATTAGAC');\n  const [metadata, setMetadata] = useState([]);\n  const [results, setResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [processingStatus, setProcessingStatus] = useState('');\n\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\n  const handleFileUpload = (event) => {\n    const uploadedFiles = Array.from(event.target.files);\n    const validFiles = uploadedFiles.filter(file => file.name.endsWith('.ab1') && file.size <= 10 * 1024 * 1024);\n\n    if (validFiles.length !== uploadedFiles.length) {\n      setError('Some files are invalid. Please upload .ab1 files under 10MB.');\n      return;\n    }\n\n    setFiles(validFiles);\n    setMetadata(validFiles.map(file => ({ fileName: file.name, group: '', replicate: '1' })));\n    setError(null);\n    setResults(null);\n  };\n\n  const handleMetadataChange = (index, field, value) => {\n    const newMetadata = [...metadata];\n    newMetadata[index][field] = value;\n    setMetadata(newMetadata);\n  };\n\n  const validateInput = () => {\n    if (!/^[ATCG]+$/.test(guideSeq)) {\n      setError('Guide sequence must contain only A, T, C, G characters.');\n      return false;\n    }\n\n    const missingGroups = metadata.some(m => !m.group.trim());\n    if (missingGroups) {\n      setError('Each file must have a group assigned.');\n      return false;\n    }\n\n    return true;\n  };\n\n  const processFiles = async () => {\n    if (!validateInput()) return;\n\n    setLoading(true);\n    setError(null);\n    setProcessingStatus('Uploading and analyzing files...');\n\n    try {\n      const formData = new FormData();\n      files.forEach(file => formData.append('files', file));\n      formData.append('guide_seq', guideSeq);\n      formData.append('groups', JSON.stringify(metadata.map(m => m.group)));\n      formData.append('replicates', JSON.stringify(metadata.map(m => m.replicate)));\n\n      const response = await fetch(`${API_URL}/analyze`, {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Server error');\n      }\n\n      const data = await response.json();\n\n      console.log(\"ðŸ“¤ Raw R output:\", data);\n\n      const groupedData = data.reduce((acc, d) => {\n        if (d.Error || isNaN(d.Mean_edit)) return acc;\n        const group = d.Group || 'Unknown';\n        if (!acc[group]) acc[group] = { total: 0, count: 0, samples: [] };\n        acc[group].total += d.Mean_edit;\n        acc[group].count++;\n        acc[group].samples.push({ file: d.File, replicate: d.Replicate, value: d.Mean_edit });\n        return acc;\n      }, {});\n\n      const barData = Object.entries(groupedData).map(([group, { total, count, samples }]) => ({\n        group,\n        mean_edit: total / count,\n        sampleCount: count,\n        samples\n      }));\n\n      setResults({\n        labels: barData.map(d => d.group),\n        datasets: [{\n          label: 'Mean Editing (%)',\n          data: barData.map(d => d.mean_edit),\n          backgroundColor: '#C00000',\n          borderColor: '#C00000',\n          borderWidth: 1\n        }],\n        rawData: barData\n      });\n    } catch (err) {\n      console.error(err);\n      setError(`Error: ${err.message}`);\n    } finally {\n      setLoading(false);\n      setProcessingStatus('');\n    }\n  };\n\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: { display: false },\n      title: { display: true, text: 'Editing by Group', color: '#C00000' },\n      tooltip: {\n        callbacks: {\n          label: (context) => {\n            const value = context.parsed.y.toFixed(2);\n            const rawData = results.rawData[context.dataIndex];\n            return [`Mean Editing: ${value}%`, `Samples: ${rawData.sampleCount}`];\n          }\n        }\n      }\n    },\n    scales: {\n      y: { beginAtZero: true, title: { display: true, text: 'Editing (%)' } },\n      x: { title: { display: true, text: 'Group' } }\n    }\n  };\n\n  return (\n    <div className=\"container\" style={{ padding: '20px' }}>\n      <h2 style={{ color: '#C00000' }}>Analyze Sanger Data</h2>\n\n      <label>Guide Sequence:</label>\n      <input type=\"text\" value={guideSeq} onChange={e => setGuideSeq(e.target.value.toUpperCase())} />\n\n      <label>Upload .ab1 Files:</label>\n      <input type=\"file\" multiple accept=\".ab1\" onChange={handleFileUpload} />\n\n      {metadata.map((meta, idx) => (\n        <div key={idx}>\n          <span>{meta.fileName}</span>\n          <input placeholder=\"Group\" value={meta.group} onChange={e => handleMetadataChange(idx, 'group', e.target.value)} />\n          <input placeholder=\"Replicate\" value={meta.replicate} onChange={e => handleMetadataChange(idx, 'replicate', e.target.value)} />\n        </div>\n      ))}\n\n      <button onClick={processFiles} disabled={loading}>{loading ? 'Processing...' : 'Analyze'}</button>\n      {processingStatus && <p>{processingStatus}</p>}\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n\n      {results && (\n        <>\n          <Bar data={results} options={chartOptions} />\n          <table>\n            <thead><tr><th>Group</th><th>File</th><th>Replicate</th><th>Editing (%)</th></tr></thead>\n            <tbody>\n              {results.rawData.flatMap(group => group.samples.map((s, i) => (\n                <tr key={`${group.group}-${s.file}-${i}`}>\n                  <td>{group.group}</td>\n                  <td>{s.file}</td>\n                  <td>{s.replicate}</td>\n                  <td>{s.value.toFixed(2)}</td>\n                </tr>\n              )))}\n            </tbody>\n          </table>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Analysis;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}