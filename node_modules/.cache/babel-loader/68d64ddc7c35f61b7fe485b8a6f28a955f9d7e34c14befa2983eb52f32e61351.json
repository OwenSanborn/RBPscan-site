{"ast":null,"code":"var _jsxFileName = \"/Users/osanborn/Documents/rbpscan/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport Papa from 'papaparse';\nimport { Scatter } from 'react-chartjs-2';\nimport { Chart as ChartJS, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LinearScale, PointElement, LineElement, Tooltip, Legend);\nconst DataVisualization = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [proteinOptions, setProteinOptions] = useState([]);\n  const [selectedProtein, setSelectedProtein] = useState(\"Pum1\");\n  const [filteredData, setFilteredData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [species, setSpecies] = useState(\"\");\n  useEffect(() => {\n    let mounted = true;\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/rbp_data.csv');\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const csvText = await response.text();\n        Papa.parse(csvText, {\n          header: true,\n          dynamicTyping: true,\n          complete: result => {\n            if (!mounted) return;\n            if (result.errors.length > 0) {\n              setError('Parsing errors occurred. Check console for details.');\n              setLoading(false);\n              return;\n            }\n            const validData = result.data.filter(row => row && row.Protein && row.Mean_protein != null && row.Mean_adar != null);\n            setData(validData);\n            const proteins = [...new Set(validData.map(row => row.Protein))];\n            setProteinOptions(proteins);\n            const initialFiltered = validData.filter(row => row.Protein === \"Pum1\");\n            setFilteredData(initialFiltered);\n            if (initialFiltered.length > 0) {\n              const speciesCode = initialFiltered[0].Species;\n              setSpecies(speciesCode === 'dre' ? 'Zebrafish' : speciesCode === 'hsa' ? 'Human' : speciesCode);\n            }\n            setLoading(false);\n          },\n          error: err => {\n            if (mounted) {\n              setError('Error parsing CSV: ' + err.message);\n              setLoading(false);\n            }\n          }\n        });\n      } catch (err) {\n        if (mounted) {\n          setError('Error fetching data: ' + err.message);\n          setLoading(false);\n        }\n      }\n    };\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n  const handleProteinChange = event => {\n    const protein = event.target.value;\n    setSelectedProtein(protein);\n    if (!protein) {\n      setFilteredData([]);\n      setSpecies(\"\");\n    } else {\n      const filtered = data.filter(row => row.Protein === protein);\n      setFilteredData(filtered);\n      if (filtered.length > 0) {\n        const speciesCode = filtered[0].Species;\n        setSpecies(speciesCode === 'dre' ? 'Zebrafish' : speciesCode === 'hsa' ? 'Human' : speciesCode);\n      } else {\n        setSpecies(\"\");\n      }\n    }\n  };\n  const isSignificant = row => {\n    const sig = row.Significant;\n    return sig === true || typeof sig === 'string' && sig.toLowerCase() === 'true';\n  };\n  const significantPoints = filteredData.filter(row => isSignificant(row));\n  const nonSignificantPoints = filteredData.filter(row => !isSignificant(row));\n  const chartData = {\n    datasets: [{\n      label: 'Non-Significant',\n      data: nonSignificantPoints.map(row => ({\n        x: row.Mean_protein,\n        y: row.Mean_adar\n      })),\n      backgroundColor: 'grey',\n      pointRadius: 5,\n      order: 1\n    }, {\n      label: 'Significant',\n      data: significantPoints.map(row => ({\n        x: row.Mean_protein,\n        y: row.Mean_adar\n      })),\n      backgroundColor: '#C00000',\n      pointRadius: 5,\n      order: 0\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: `Mean Percent Editing ${selectedProtein || 'Pum1'}`\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Mean Percent Editing AdarCD'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            const datasetIndex = context.datasetIndex;\n            const dataArray = datasetIndex === 0 ? nonSignificantPoints : significantPoints;\n            const point = dataArray[context.dataIndex];\n            return `Motif: ${point.Motif}, Protein: ${point.Protein}`;\n          }\n        }\n      }\n    }\n  };\n\n  // âœ… TOP 10 MOTIFS with useMemo to re-calculate on protein change\n  const topMotifs = useMemo(() => {\n    return [...filteredData].sort((a, b) => b.Mean_adar - a.Mean_adar).slice(0, 10);\n  }, [filteredData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select\",\n      style: {\n        marginTop: '20pt'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedProtein,\n        onChange: handleProteinChange,\n        style: {\n          backgroundColor: '#C00000',\n          color: 'white',\n          borderRadius: '20px',\n          padding: '5px 10px',\n          border: 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Select a Protein--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), proteinOptions.map(protein => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: protein,\n          children: protein\n        }, protein, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), species && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '75px',\n        left: '15px'\n      },\n      children: [\"Species: \", species]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this) : filteredData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"columns mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column is-10\",\n        style: {\n          height: '500px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Scatter, {\n          data: chartData,\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column is-2\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table is-bordered is-fullwidth\",\n          style: {\n            backgroundColor: 'white',\n            color: 'black',\n            fontSize: '0.85rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            style: {\n              backgroundColor: '#e8e8e8'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  textAlign: 'center',\n                  verticalAlign: 'middle',\n                  color: 'black'\n                },\n                children: \"Motif\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  textAlign: 'center',\n                  verticalAlign: 'middle',\n                  color: 'black'\n                },\n                children: \"% Editing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: topMotifs.map((motif, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  textAlign: 'center',\n                  verticalAlign: 'middle',\n                  color: 'black'\n                },\n                children: motif.Motif\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  textAlign: 'center',\n                  verticalAlign: 'middle',\n                  color: 'black'\n                },\n                children: motif.Mean_adar.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginTop: '40px'\n      },\n      children: selectedProtein ? 'No data for selected protein' : 'Please select a protein'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(DataVisualization, \"XzkpwAOz2s5/DpZKFX6eck/THxM=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Papa","Scatter","Chart","ChartJS","LinearScale","PointElement","LineElement","Tooltip","Legend","jsxDEV","_jsxDEV","register","DataVisualization","_s","data","setData","proteinOptions","setProteinOptions","selectedProtein","setSelectedProtein","filteredData","setFilteredData","error","setError","loading","setLoading","species","setSpecies","mounted","fetchData","response","fetch","ok","Error","status","csvText","text","parse","header","dynamicTyping","complete","result","errors","length","validData","filter","row","Protein","Mean_protein","Mean_adar","proteins","Set","map","initialFiltered","speciesCode","Species","err","message","handleProteinChange","event","protein","target","value","filtered","isSignificant","sig","Significant","toLowerCase","significantPoints","nonSignificantPoints","chartData","datasets","label","x","y","backgroundColor","pointRadius","order","chartOptions","responsive","maintainAspectRatio","scales","beginAtZero","title","display","plugins","legend","tooltip","callbacks","context","datasetIndex","dataArray","point","dataIndex","Motif","topMotifs","sort","a","b","slice","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","onChange","borderRadius","padding","border","position","top","left","height","options","fontSize","textAlign","verticalAlign","motif","index","toFixed","_c","$RefreshReg$"],"sources":["/Users/osanborn/Documents/rbpscan/src/components/DataVisualization.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport Papa from 'papaparse';\nimport { Scatter } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Tooltip,\n  Legend\n} from 'chart.js';\n\nChartJS.register(LinearScale, PointElement, LineElement, Tooltip, Legend);\n\nconst DataVisualization = () => {\n  const [data, setData] = useState([]);\n  const [proteinOptions, setProteinOptions] = useState([]);\n  const [selectedProtein, setSelectedProtein] = useState(\"Pum1\");\n  const [filteredData, setFilteredData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [species, setSpecies] = useState(\"\");\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/rbp_data.csv');\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n\n        const csvText = await response.text();\n        Papa.parse(csvText, {\n          header: true,\n          dynamicTyping: true,\n          complete: (result) => {\n            if (!mounted) return;\n\n            if (result.errors.length > 0) {\n              setError('Parsing errors occurred. Check console for details.');\n              setLoading(false);\n              return;\n            }\n\n            const validData = result.data.filter(row =>\n              row && row.Protein && row.Mean_protein != null && row.Mean_adar != null\n            );\n\n            setData(validData);\n\n            const proteins = [...new Set(validData.map(row => row.Protein))];\n            setProteinOptions(proteins);\n\n            const initialFiltered = validData.filter(row => row.Protein === \"Pum1\");\n            setFilteredData(initialFiltered);\n\n            if (initialFiltered.length > 0) {\n              const speciesCode = initialFiltered[0].Species;\n              setSpecies(speciesCode === 'dre' ? 'Zebrafish' : speciesCode === 'hsa' ? 'Human' : speciesCode);\n            }\n\n            setLoading(false);\n          },\n          error: (err) => {\n            if (mounted) {\n              setError('Error parsing CSV: ' + err.message);\n              setLoading(false);\n            }\n          }\n        });\n      } catch (err) {\n        if (mounted) {\n          setError('Error fetching data: ' + err.message);\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchData();\n    return () => { mounted = false; };\n  }, []);\n\n  const handleProteinChange = (event) => {\n    const protein = event.target.value;\n    setSelectedProtein(protein);\n\n    if (!protein) {\n      setFilteredData([]);\n      setSpecies(\"\");\n    } else {\n      const filtered = data.filter(row => row.Protein === protein);\n      setFilteredData(filtered);\n\n      if (filtered.length > 0) {\n        const speciesCode = filtered[0].Species;\n        setSpecies(speciesCode === 'dre' ? 'Zebrafish' : speciesCode === 'hsa' ? 'Human' : speciesCode);\n      } else {\n        setSpecies(\"\");\n      }\n    }\n  };\n\n  const isSignificant = (row) => {\n    const sig = row.Significant;\n    return sig === true || (typeof sig === 'string' && sig.toLowerCase() === 'true');\n  };\n\n  const significantPoints = filteredData.filter(row => isSignificant(row));\n  const nonSignificantPoints = filteredData.filter(row => !isSignificant(row));\n\n  const chartData = {\n    datasets: [\n      {\n        label: 'Non-Significant',\n        data: nonSignificantPoints.map(row => ({ x: row.Mean_protein, y: row.Mean_adar })),\n        backgroundColor: 'grey',\n        pointRadius: 5,\n        order: 1,\n      },\n      {\n        label: 'Significant',\n        data: significantPoints.map(row => ({ x: row.Mean_protein, y: row.Mean_adar })),\n        backgroundColor: '#C00000',\n        pointRadius: 5,\n        order: 0,\n      }\n    ],\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        beginAtZero: true,\n        title: { display: true, text: `Mean Percent Editing ${selectedProtein || 'Pum1'}` }\n      },\n      y: {\n        beginAtZero: true,\n        title: { display: true, text: 'Mean Percent Editing AdarCD' }\n      }\n    },\n    plugins: {\n      legend: { display: false },\n      tooltip: {\n        callbacks: {\n          label: (context) => {\n            const datasetIndex = context.datasetIndex;\n            const dataArray = datasetIndex === 0 ? nonSignificantPoints : significantPoints;\n            const point = dataArray[context.dataIndex];\n            return `Motif: ${point.Motif}, Protein: ${point.Protein}`;\n          }\n        }\n      }\n    }\n  };\n\n  // âœ… TOP 10 MOTIFS with useMemo to re-calculate on protein change\n  const topMotifs = useMemo(() => {\n    return [...filteredData]\n      .sort((a, b) => b.Mean_adar - a.Mean_adar)\n      .slice(0, 10);\n  }, [filteredData]);\n\n  return (\n    <div className=\"container\">\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n\n      <div className=\"select\" style={{ marginTop: '20pt' }}>\n        <select\n          value={selectedProtein}\n          onChange={handleProteinChange}\n          style={{\n            backgroundColor: '#C00000',\n            color: 'white',\n            borderRadius: '20px',\n            padding: '5px 10px',\n            border: 'none'\n          }}\n        >\n          <option value=\"\">--Select a Protein--</option>\n          {proteinOptions.map((protein) => (\n            <option key={protein} value={protein}>{protein}</option>\n          ))}\n        </select>\n      </div>\n\n      {species && (\n        <div style={{ position: 'absolute', top: '75px', left: '15px' }}>\n          Species: {species}\n        </div>\n      )}\n\n      {loading ? (\n        <p>Loading data...</p>\n      ) : filteredData.length > 0 ? (\n        <div className=\"columns mt-5\">\n          <div className=\"column is-10\" style={{ height: '500px' }}>\n            <Scatter data={chartData} options={chartOptions} />\n          </div>\n\n          <div className=\"column is-2\">\n            <table\n              className=\"table is-bordered is-fullwidth\"\n              style={{ backgroundColor: 'white', color: 'black', fontSize: '0.85rem' }}\n            >\n              <thead style={{ backgroundColor: '#e8e8e8' }}>\n                <tr>\n                  <th style={{ textAlign: 'center', verticalAlign: 'middle', color: 'black' }}>Motif</th>\n                  <th style={{ textAlign: 'center', verticalAlign: 'middle', color: 'black' }}>% Editing</th>\n                </tr>\n              </thead>\n              <tbody>\n                {topMotifs.map((motif, index) => (\n                  <tr key={index}>\n                    <td style={{ textAlign: 'center', verticalAlign: 'middle', color: 'black' }}>{motif.Motif}</td>\n                    <td style={{ textAlign: 'center', verticalAlign: 'middle', color: 'black' }}>\n                      {motif.Mean_adar.toFixed(2)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      ) : (\n        <p style={{ marginTop: '40px' }}>\n          {selectedProtein ? 'No data for selected protein' : 'Please select a protein'}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default DataVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}