{"ast":null,"code":"var _jsxFileName = \"/Users/osanborn/Documents/rbpscan/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport { Scatter } from 'react-chartjs-2';\nimport { Chart as ChartJS, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LinearScale, PointElement, LineElement, Tooltip, Legend);\nconst DataVisualization = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [proteinOptions, setProteinOptions] = useState([]);\n  const [selectedProtein, setSelectedProtein] = useState(\"Pum1\");\n  const [filteredData, setFilteredData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [species, setSpecies] = useState(\"\");\n  useEffect(() => {\n    let mounted = true;\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/rbp_data.csv');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const csvText = await response.text();\n        Papa.parse(csvText, {\n          header: true,\n          dynamicTyping: true,\n          complete: result => {\n            if (mounted) {\n              if (result.errors.length > 0) {\n                setError('Parsing errors occurred. Check console for details.');\n                setLoading(false);\n                return;\n              }\n              const validData = result.data.filter(row => row && row.Protein && row.Mean_protein != null && row.Mean_adar != null);\n              if (validData.length === 0) {\n                setError('No valid data found in CSV');\n              }\n              setData(validData);\n              const proteins = [...new Set(validData.map(row => row.Protein))];\n              setProteinOptions(proteins);\n              const initialFiltered = validData.filter(row => row.Protein === \"Pum1\");\n              setFilteredData(initialFiltered);\n              if (initialFiltered.length > 0) {\n                const speciesCode = initialFiltered[0].Species;\n                setSpecies(speciesCode === 'dre' ? 'Zebrafish' : speciesCode === 'hsa' ? 'Human' : speciesCode);\n              }\n              setLoading(false);\n            }\n          },\n          error: err => {\n            if (mounted) {\n              setError('Error parsing CSV: ' + err.message);\n              setLoading(false);\n            }\n          }\n        });\n      } catch (err) {\n        if (mounted) {\n          setError('Error fetching data: ' + err.message);\n          setLoading(false);\n        }\n      }\n    };\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n  const handleProteinChange = event => {\n    const protein = event.target.value;\n    setSelectedProtein(protein);\n    if (!protein) {\n      setFilteredData([]);\n      setSpecies(\"\");\n    } else {\n      const filtered = data.filter(row => row.Protein === protein);\n      setFilteredData(filtered);\n      if (filtered.length > 0) {\n        const speciesCode = filtered[0].Species;\n        setSpecies(speciesCode === 'dre' ? 'Zebrafish' : speciesCode === 'hsa' ? 'Human' : speciesCode);\n      } else {\n        setSpecies(\"\");\n      }\n    }\n  };\n  const isSignificant = row => {\n    const sig = row.Significant;\n    return sig === true || typeof sig === 'string' && sig.toLowerCase() === 'true';\n  };\n  const significantPoints = filteredData.filter(row => isSignificant(row));\n  const nonSignificantPoints = filteredData.filter(row => !isSignificant(row));\n  const chartData = {\n    datasets: [{\n      label: 'Non-Significant',\n      data: nonSignificantPoints.map(row => ({\n        x: row.Mean_protein,\n        y: row.Mean_adar\n      })),\n      backgroundColor: 'grey',\n      pointRadius: 5,\n      order: 1\n    }, {\n      label: 'Significant',\n      data: significantPoints.map(row => ({\n        x: row.Mean_protein,\n        y: row.Mean_adar\n      })),\n      backgroundColor: '#C00000',\n      pointRadius: 5,\n      order: 0\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: `Mean Percent Editing ${selectedProtein || 'Pum1'}`\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Mean Percent Editing AdarCD'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            const datasetIndex = context.datasetIndex;\n            const dataArray = datasetIndex === 0 ? nonSignificantPoints : significantPoints;\n            const point = dataArray[context.dataIndex];\n            return `Motif: ${point.Motif}, Protein: ${point.Protein}`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select\",\n      style: {\n        marginTop: '20pt'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedProtein,\n        onChange: handleProteinChange,\n        style: {\n          backgroundColor: '#C00000',\n          color: 'white',\n          borderRadius: '20px',\n          // Rounded corners\n          padding: '5px 10px',\n          // Optional: improves appearance\n          border: 'none' // Optional: cleaner look\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Select a Protein--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), proteinOptions.map(protein => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: protein,\n          children: protein\n        }, protein, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), species && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '75px',\n        left: '15px'\n      },\n      children: [\"Species: \", species]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this) : filteredData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '500px',\n        width: '100%',\n        marginTop: '40px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Scatter, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginTop: '40px'\n      },\n      children: selectedProtein ? 'No data for selected protein' : 'Please select a protein'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n_s(DataVisualization, \"w8IolMw7esybi6Nge4h/SGEOky8=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useState","useEffect","Papa","Scatter","Chart","ChartJS","LinearScale","PointElement","LineElement","Tooltip","Legend","jsxDEV","_jsxDEV","register","DataVisualization","_s","data","setData","proteinOptions","setProteinOptions","selectedProtein","setSelectedProtein","filteredData","setFilteredData","error","setError","loading","setLoading","species","setSpecies","mounted","fetchData","response","fetch","ok","Error","status","csvText","text","parse","header","dynamicTyping","complete","result","errors","length","validData","filter","row","Protein","Mean_protein","Mean_adar","proteins","Set","map","initialFiltered","speciesCode","Species","err","message","handleProteinChange","event","protein","target","value","filtered","isSignificant","sig","Significant","toLowerCase","significantPoints","nonSignificantPoints","chartData","datasets","label","x","y","backgroundColor","pointRadius","order","chartOptions","responsive","maintainAspectRatio","scales","beginAtZero","title","display","plugins","legend","tooltip","callbacks","context","datasetIndex","dataArray","point","dataIndex","Motif","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","onChange","borderRadius","padding","border","position","top","left","height","width","options","_c","$RefreshReg$"],"sources":["/Users/osanborn/Documents/rbpscan/src/components/DataVisualization.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport { Scatter } from 'react-chartjs-2';\nimport { Chart as ChartJS, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\n\n// Register ChartJS components\nChartJS.register(LinearScale, PointElement, LineElement, Tooltip, Legend);\n\nconst DataVisualization = () => {\n  const [data, setData] = useState([]);\n  const [proteinOptions, setProteinOptions] = useState([]);\n  const [selectedProtein, setSelectedProtein] = useState(\"Pum1\");\n  const [filteredData, setFilteredData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [species, setSpecies] = useState(\"\");\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/rbp_data.csv');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const csvText = await response.text();\n        Papa.parse(csvText, {\n          header: true,\n          dynamicTyping: true,\n          complete: (result) => {\n            if (mounted) {\n              if (result.errors.length > 0) {\n                setError('Parsing errors occurred. Check console for details.');\n                setLoading(false);\n                return;\n              }\n\n              const validData = result.data.filter(row => \n                row && \n                row.Protein && \n                row.Mean_protein != null && \n                row.Mean_adar != null\n              );\n\n              if (validData.length === 0) {\n                setError('No valid data found in CSV');\n              }\n\n              setData(validData);\n              const proteins = [...new Set(validData.map(row => row.Protein))];\n              setProteinOptions(proteins);\n\n              const initialFiltered = validData.filter(row => row.Protein === \"Pum1\");\n              setFilteredData(initialFiltered);\n              if (initialFiltered.length > 0) {\n                const speciesCode = initialFiltered[0].Species;\n                setSpecies(speciesCode === 'dre' ? 'Zebrafish' : speciesCode === 'hsa' ? 'Human' : speciesCode);\n              }\n              setLoading(false);\n            }\n          },\n          error: (err) => {\n            if (mounted) {\n              setError('Error parsing CSV: ' + err.message);\n              setLoading(false);\n            }\n          }\n        });\n      } catch (err) {\n        if (mounted) {\n          setError('Error fetching data: ' + err.message);\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const handleProteinChange = (event) => {\n    const protein = event.target.value;\n    setSelectedProtein(protein);\n    if (!protein) {\n      setFilteredData([]);\n      setSpecies(\"\");\n    } else {\n      const filtered = data.filter(row => row.Protein === protein);\n      setFilteredData(filtered);\n      if (filtered.length > 0) {\n        const speciesCode = filtered[0].Species;\n        setSpecies(speciesCode === 'dre' ? 'Zebrafish' : speciesCode === 'hsa' ? 'Human' : speciesCode);\n      } else {\n        setSpecies(\"\");\n      }\n    }\n  };\n\n  const isSignificant = (row) => {\n    const sig = row.Significant;\n    return sig === true || (typeof sig === 'string' && sig.toLowerCase() === 'true');\n  };\n\n  const significantPoints = filteredData.filter(row => isSignificant(row));\n  const nonSignificantPoints = filteredData.filter(row => !isSignificant(row));\n\n  const chartData = {\n    datasets: [\n      {\n        label: 'Non-Significant',\n        data: nonSignificantPoints.map(row => ({\n          x: row.Mean_protein,\n          y: row.Mean_adar\n        })),\n        backgroundColor: 'grey',\n        pointRadius: 5,\n        order: 1,\n      },\n      {\n        label: 'Significant',\n        data: significantPoints.map(row => ({\n          x: row.Mean_protein,\n          y: row.Mean_adar\n        })),\n        backgroundColor: '#C00000',\n        pointRadius: 5,\n        order: 0,\n      }\n    ],\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: { \n        beginAtZero: true,\n        title: {\n          display: true,\n          text: `Mean Percent Editing ${selectedProtein || 'Pum1'}`\n        }\n      },\n      y: { \n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Mean Percent Editing AdarCD'\n        }\n      }\n    },\n    plugins: {\n      legend: { display: false },\n      tooltip: {\n        callbacks: {\n          label: (context) => {\n            const datasetIndex = context.datasetIndex;\n            const dataArray = datasetIndex === 0 ? nonSignificantPoints : significantPoints;\n            const point = dataArray[context.dataIndex];\n            return `Motif: ${point.Motif}, Protein: ${point.Protein}`;\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n\n      <div className=\"select\" style={{ marginTop: '20pt' }}>\n        <select \n          value={selectedProtein} \n          onChange={handleProteinChange}\n          style={{ \n            backgroundColor: '#C00000',\n            color: 'white',\n            borderRadius: '20px', // Rounded corners\n            padding: '5px 10px',  // Optional: improves appearance\n            border: 'none'        // Optional: cleaner look\n          }}\n        >\n          <option value=\"\">--Select a Protein--</option>\n          {proteinOptions.map((protein) => (\n            <option key={protein} value={protein}>\n              {protein}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {species && (\n        <div style={{ position: 'absolute', top: '75px', left: '15px' }}>\n          Species: {species}\n        </div>\n      )}\n\n      {loading ? (\n        <p>Loading data...</p>\n      ) : filteredData.length > 0 ? (\n        <div style={{ height: '500px', width: '100%', marginTop: '40px' }}>\n          <Scatter data={chartData} options={chartOptions} />\n        </div>\n      ) : (\n        <p style={{ marginTop: '40px' }}>\n          {selectedProtein ? 'No data for selected protein' : 'Please select a protein'}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default DataVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}