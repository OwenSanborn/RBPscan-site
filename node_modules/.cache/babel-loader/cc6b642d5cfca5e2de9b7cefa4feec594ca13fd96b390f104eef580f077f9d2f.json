{"ast":null,"code":"var _jsxFileName = \"/Users/osanborn/Documents/rbpscan/src/components/SangerAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, PointElement, Title, Tooltip, Legend } from 'chart.js';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, PointElement, Title, Tooltip, Legend);\nconst Analysis = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [metadata, setMetadata] = useState([]);\n  const [results, setResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [processingStatus, setProcessingStatus] = useState('');\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n  const handleFileUpload = event => {\n    const uploadedFiles = Array.from(event.target.files);\n    const validFiles = uploadedFiles.filter(file => file.name.endsWith('.ab1') && file.size <= 10 * 1024 * 1024);\n    if (validFiles.length !== uploadedFiles.length) {\n      setError('Some files are invalid. Please upload .ab1 files under 10MB.');\n      return;\n    }\n    setFiles(validFiles);\n    setMetadata(validFiles.map(file => ({\n      fileName: file.name,\n      group: ''\n    })));\n    setError(null);\n    setResults(null);\n  };\n  const handleMetadataChange = (index, field, value) => {\n    const newMetadata = [...metadata];\n    newMetadata[index][field] = value;\n    setMetadata(newMetadata);\n  };\n  const processFiles = async () => {\n    if (!metadata.length) return;\n    setLoading(true);\n    setError(null);\n    setProcessingStatus('Uploading and analyzing files...');\n    try {\n      const formData = new FormData();\n      files.forEach(file => formData.append('files', file));\n      formData.append('guide_seq', '');\n      const replicateCounts = {};\n      const groups = metadata.map(meta => {\n        const group = meta.group.trim() || 'default';\n        replicateCounts[group] = (replicateCounts[group] || 0) + 1;\n        return group;\n      });\n      const replicates = groups.map((group, idx, arr) => {\n        return arr.slice(0, idx + 1).filter(g => g === group).length.toString();\n      });\n      formData.append('groups', JSON.stringify(groups));\n      formData.append('replicates', JSON.stringify(replicates));\n      const response = await fetch(`${API_URL}/analyze`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Server error');\n      }\n      const data = await response.json();\n      const grouped = data.reduce((acc, d) => {\n        if (d.Error || isNaN(d.Mean_edit)) return acc;\n        const group = d.Group || 'Unknown';\n        if (!acc[group]) acc[group] = {\n          total: 0,\n          count: 0,\n          samples: []\n        };\n        acc[group].total += d.Mean_edit;\n        acc[group].count++;\n        acc[group].samples.push({\n          file: d.File,\n          replicate: d.Replicate,\n          value: d.Mean_edit\n        });\n        return acc;\n      }, {});\n      const labels = Object.keys(grouped);\n      const maxEdit = Math.max(...data.map(d => d.Mean_edit || 0));\n      const chartMax = Math.min(100, Math.ceil(maxEdit + 10));\n      const groupMeans = labels.map(group => grouped[group].total / grouped[group].count);\n      const replicatePoints = {\n        label: 'Replicates',\n        data: labels.flatMap((group, i) => grouped[group].samples.map(s => ({\n          x: labels[i],\n          y: s.value\n        }))),\n        type: 'scatter',\n        backgroundColor: '#000',\n        pointStyle: 'circle',\n        radius: 4,\n        order: 2\n      };\n      const barData = {\n        label: 'Mean Editing (%)',\n        data: groupMeans,\n        backgroundColor: '#C00000',\n        borderColor: '#C00000',\n        borderWidth: 1,\n        order: 1\n      };\n      setResults({\n        labels,\n        datasets: [barData, replicatePoints],\n        rawData: data.map(d => ({\n          file: d.File,\n          group: d.Group,\n          replicate: d.Replicate,\n          value: d.Mean_edit\n        })),\n        chartMax\n      });\n    } catch (err) {\n      console.error(err);\n      setError(`Error: ${err.message}`);\n    } finally {\n      setLoading(false);\n      setProcessingStatus('');\n    }\n  };\n  const chartOptions = maxY => ({\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: 'Editing by Group',\n        color: '#C00000'\n      }\n    },\n    scales: {\n      x: {\n        type: 'category',\n        title: {\n          display: true,\n          text: 'Group'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        max: maxY,\n        title: {\n          display: true,\n          text: 'Editing (%)'\n        }\n      }\n    }\n  });\n  const exportToCSV = () => {\n    if (!results) return;\n    const rows = [[\"File\", \"Group\", \"Replicate\", \"Editing (%)\"]];\n    metadata.forEach((m, i) => {\n      const result = results.rawData[i];\n      const group = m.group.trim() || 'default';\n      const replicate = metadata.slice(0, i + 1).filter(meta => (meta.group.trim() || 'default') === group).length;\n      rows.push([m.fileName, m.group, replicate.toString(), (result === null || result === void 0 ? void 0 : result.value) != null ? result.value.toFixed(2) : '']);\n    });\n    const csvContent = \"data:text/csv;charset=utf-8,\" + rows.map(r => r.join(\",\")).join(\"\\n\");\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.href = encodedUri;\n    link.download = \"sanger_results.csv\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container p-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title is-3 has-text-black mb-4\",\n      children: \"Sanger Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field is-grouped mb-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file has-name is-rounded\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"file-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"file-input\",\n              type: \"file\",\n              accept: \".ab1\",\n              multiple: true,\n              onChange: handleFileUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"file-cta\",\n              style: {\n                backgroundColor: '#C00000',\n                color: 'white',\n                borderRadius: '20px'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-label\",\n                children: \"Select Files\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: '#777',\n                paddingLeft: '10px'\n              },\n              children: files.length > 0 ? `${files.length} file(s)` : 'No files selected'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: processFiles,\n          className: \"button\",\n          style: {\n            backgroundColor: '#C00000',\n            color: 'white',\n            borderRadius: '20px',\n            padding: '10px 20px',\n            border: 'none'\n          },\n          disabled: loading,\n          children: loading ? 'Processing...' : 'Analyze'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), metadata.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"columns\",\n      style: {\n        fontSize: '0.85rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column is-half\",\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table is-bordered has-text-black\",\n          style: {\n            backgroundColor: 'white',\n            color: 'black',\n            textAlign: 'center',\n            verticalAlign: 'middle'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            style: {\n              backgroundColor: '#e8e8e8'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  color: 'black'\n                },\n                children: \"File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  color: 'black'\n                },\n                children: \"Group\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  color: 'black'\n                },\n                children: \"Replicate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  color: 'black'\n                },\n                children: \"% Editing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            style: {\n              backgroundColor: '#ffffff',\n              color: 'black'\n            },\n            children: metadata.map((meta, idx) => {\n              var _results$rawData, _results$rawData$idx, _results$rawData$idx$;\n              const group = meta.group.trim() || 'default';\n              const replicate = metadata.slice(0, idx + 1).filter(m => (m.group.trim() || 'default') === group).length;\n              const editingVal = (results === null || results === void 0 ? void 0 : (_results$rawData = results.rawData) === null || _results$rawData === void 0 ? void 0 : (_results$rawData$idx = _results$rawData[idx]) === null || _results$rawData$idx === void 0 ? void 0 : (_results$rawData$idx$ = _results$rawData$idx.value) === null || _results$rawData$idx$ === void 0 ? void 0 : _results$rawData$idx$.toFixed(2)) || '';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    color: 'black',\n                    verticalAlign: 'middle'\n                  },\n                  children: meta.fileName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 265,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    className: \"input is-small\",\n                    style: {\n                      backgroundColor: 'white',\n                      color: 'black',\n                      textAlign: 'center'\n                    },\n                    value: meta.group,\n                    onChange: e => handleMetadataChange(idx, 'group', e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 267,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    verticalAlign: 'middle'\n                  },\n                  children: replicate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    verticalAlign: 'middle'\n                  },\n                  children: editingVal\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 23\n                }, this)]\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), results && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: '0.85rem'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            onClick: exportToCSV,\n            style: {\n              cursor: 'pointer',\n              color: '#C00000',\n              textDecoration: 'underline'\n            },\n            children: \"Export to CSV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this), results && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column is-half\",\n        style: {\n          minHeight: '400px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Bar, {\n          data: results,\n          options: chartOptions(results.chartMax)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this), processingStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: processingStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 28\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"has-text-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(Analysis, \"zzfr1sMejOSiHjqWSxAUxIeiSqY=\");\n_c = Analysis;\nexport default Analysis;\nvar _c;\n$RefreshReg$(_c, \"Analysis\");","map":{"version":3,"names":["React","useState","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","PointElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Analysis","_s","files","setFiles","metadata","setMetadata","results","setResults","loading","setLoading","error","setError","processingStatus","setProcessingStatus","API_URL","process","env","REACT_APP_API_URL","handleFileUpload","event","uploadedFiles","Array","from","target","validFiles","filter","file","name","endsWith","size","length","map","fileName","group","handleMetadataChange","index","field","value","newMetadata","processFiles","formData","FormData","forEach","append","replicateCounts","groups","meta","trim","replicates","idx","arr","slice","g","toString","JSON","stringify","response","fetch","method","body","ok","errorData","json","Error","data","grouped","reduce","acc","d","isNaN","Mean_edit","Group","total","count","samples","push","File","replicate","Replicate","labels","Object","keys","maxEdit","Math","max","chartMax","min","ceil","groupMeans","replicatePoints","label","flatMap","i","s","x","y","type","backgroundColor","pointStyle","radius","order","barData","borderColor","borderWidth","datasets","rawData","err","console","message","chartOptions","maxY","responsive","plugins","legend","display","title","text","color","scales","beginAtZero","exportToCSV","rows","m","result","toFixed","csvContent","r","join","encodedUri","encodeURI","link","document","createElement","href","download","appendChild","click","removeChild","className","children","_jsxFileName","lineNumber","columnNumber","accept","multiple","onChange","style","borderRadius","paddingLeft","onClick","padding","border","disabled","fontSize","textAlign","verticalAlign","_results$rawData","_results$rawData$idx","_results$rawData$idx$","editingVal","e","cursor","textDecoration","minHeight","options","_c","$RefreshReg$"],"sources":["/Users/osanborn/Documents/rbpscan/src/components/SangerAnalysis.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\nimport '../App.css';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, PointElement, Title, Tooltip, Legend);\n\nconst Analysis = () => {\n  const [files, setFiles] = useState([]);\n  const [metadata, setMetadata] = useState([]);\n  const [results, setResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [processingStatus, setProcessingStatus] = useState('');\n\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\n  const handleFileUpload = (event) => {\n    const uploadedFiles = Array.from(event.target.files);\n    const validFiles = uploadedFiles.filter(file => file.name.endsWith('.ab1') && file.size <= 10 * 1024 * 1024);\n\n    if (validFiles.length !== uploadedFiles.length) {\n      setError('Some files are invalid. Please upload .ab1 files under 10MB.');\n      return;\n    }\n\n    setFiles(validFiles);\n    setMetadata(validFiles.map((file) => ({\n      fileName: file.name,\n      group: ''\n    })));\n    setError(null);\n    setResults(null);\n  };\n\n  const handleMetadataChange = (index, field, value) => {\n    const newMetadata = [...metadata];\n    newMetadata[index][field] = value;\n    setMetadata(newMetadata);\n  };\n\n  const processFiles = async () => {\n    if (!metadata.length) return;\n\n    setLoading(true);\n    setError(null);\n    setProcessingStatus('Uploading and analyzing files...');\n\n    try {\n      const formData = new FormData();\n      files.forEach(file => formData.append('files', file));\n      formData.append('guide_seq', '');\n\n      const replicateCounts = {};\n      const groups = metadata.map((meta) => {\n        const group = meta.group.trim() || 'default';\n        replicateCounts[group] = (replicateCounts[group] || 0) + 1;\n        return group;\n      });\n      const replicates = groups.map((group, idx, arr) => {\n        return arr.slice(0, idx + 1).filter(g => g === group).length.toString();\n      });\n\n      formData.append('groups', JSON.stringify(groups));\n      formData.append('replicates', JSON.stringify(replicates));\n\n      const response = await fetch(`${API_URL}/analyze`, {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Server error');\n      }\n\n      const data = await response.json();\n\n      const grouped = data.reduce((acc, d) => {\n        if (d.Error || isNaN(d.Mean_edit)) return acc;\n        const group = d.Group || 'Unknown';\n        if (!acc[group]) acc[group] = { total: 0, count: 0, samples: [] };\n        acc[group].total += d.Mean_edit;\n        acc[group].count++;\n        acc[group].samples.push({ file: d.File, replicate: d.Replicate, value: d.Mean_edit });\n        return acc;\n      }, {});\n\n      const labels = Object.keys(grouped);\n      const maxEdit = Math.max(...data.map(d => d.Mean_edit || 0));\n      const chartMax = Math.min(100, Math.ceil(maxEdit + 10));\n\n      const groupMeans = labels.map(group => grouped[group].total / grouped[group].count);\n\n      const replicatePoints = {\n        label: 'Replicates',\n        data: labels.flatMap((group, i) =>\n          grouped[group].samples.map(s => ({\n            x: labels[i],\n            y: s.value\n          }))\n        ),\n        type: 'scatter',\n        backgroundColor: '#000',\n        pointStyle: 'circle',\n        radius: 4,\n        order: 2\n      };\n\n      const barData = {\n        label: 'Mean Editing (%)',\n        data: groupMeans,\n        backgroundColor: '#C00000',\n        borderColor: '#C00000',\n        borderWidth: 1,\n        order: 1\n      };\n\n      setResults({\n        labels,\n        datasets: [barData, replicatePoints],\n        rawData: data.map(d => ({\n          file: d.File,\n          group: d.Group,\n          replicate: d.Replicate,\n          value: d.Mean_edit\n        })),\n        chartMax\n      });\n    } catch (err) {\n      console.error(err);\n      setError(`Error: ${err.message}`);\n    } finally {\n      setLoading(false);\n      setProcessingStatus('');\n    }\n  };\n\n  const chartOptions = (maxY) => ({\n    responsive: true,\n    plugins: {\n      legend: { display: false },\n      title: { display: true, text: 'Editing by Group', color: '#C00000' },\n    },\n    scales: {\n      x: {\n        type: 'category',\n        title: { display: true, text: 'Group' }\n      },\n      y: {\n        beginAtZero: true,\n        max: maxY,\n        title: { display: true, text: 'Editing (%)' }\n      }\n    }\n  });\n\n  const exportToCSV = () => {\n    if (!results) return;\n\n    const rows = [[\"File\", \"Group\", \"Replicate\", \"Editing (%)\"]];\n    metadata.forEach((m, i) => {\n      const result = results.rawData[i];\n      const group = m.group.trim() || 'default';\n      const replicate = metadata\n        .slice(0, i + 1)\n        .filter(meta => (meta.group.trim() || 'default') === group).length;\n\n      rows.push([\n        m.fileName,\n        m.group,\n        replicate.toString(),\n        result?.value != null ? result.value.toFixed(2) : ''\n      ]);\n    });\n\n    const csvContent = \"data:text/csv;charset=utf-8,\" + rows.map(r => r.join(\",\")).join(\"\\n\");\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.href = encodedUri;\n    link.download = \"sanger_results.csv\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"container p-5\">\n      <h1 className=\"title is-3 has-text-black mb-4\">Sanger Analysis</h1>\n\n      <div className=\"field is-grouped mb-5\">\n        <div className=\"control\">\n          <div className=\"file has-name is-rounded\">\n            <label className=\"file-label\">\n              <input\n                className=\"file-input\"\n                type=\"file\"\n                accept=\".ab1\"\n                multiple\n                onChange={handleFileUpload}\n              />\n              <span className=\"file-cta\" style={{ backgroundColor: '#C00000', color: 'white', borderRadius: '20px' }}>\n                <span className=\"file-label\">Select Files</span>\n              </span>\n              <span style={{ color: '#777', paddingLeft: '10px' }}>\n                {files.length > 0 ? `${files.length} file(s)` : 'No files selected'}\n              </span>\n            </label>\n          </div>\n        </div>\n\n        <div className=\"control\">\n          <button\n            onClick={processFiles}\n            className=\"button\"\n            style={{\n              backgroundColor: '#C00000',\n              color: 'white',\n              borderRadius: '20px',\n              padding: '10px 20px',\n              border: 'none'\n            }}\n            disabled={loading}\n          >\n            {loading ? 'Processing...' : 'Analyze'}\n          </button>\n        </div>\n      </div>\n\n      {metadata.length > 0 && (\n        <div className=\"columns\" style={{ fontSize: '0.85rem' }}>\n          <div className=\"column is-half\">\n            <table\n              className=\"table is-bordered has-text-black\"\n              style={{ backgroundColor: 'white', color: 'black', textAlign: 'center', verticalAlign: 'middle' }}\n            >\n              <thead style={{ backgroundColor: '#e8e8e8' }}>\n                <tr>\n                  <th style={{ color: 'black' }}>File</th>\n                  <th style={{ color: 'black' }}>Group</th>\n                  <th style={{ color: 'black' }}>Replicate</th>\n                  <th style={{ color: 'black' }}>% Editing</th>\n                </tr>\n              </thead>\n              <tbody style={{ backgroundColor: '#ffffff', color: 'black' }}>\n                {metadata.map((meta, idx) => {\n                  const group = meta.group.trim() || 'default';\n                  const replicate = metadata\n                    .slice(0, idx + 1)\n                    .filter(m => (m.group.trim() || 'default') === group).length;\n\n                  const editingVal = results?.rawData?.[idx]?.value?.toFixed(2) || '';\n\n                  return (\n                    <tr key={idx}>\n                      <td style={{ color: 'black', verticalAlign: 'middle' }}>{meta.fileName}</td>\n                      <td>\n                        <input\n                          className=\"input is-small\"\n                          style={{\n                            backgroundColor: 'white',\n                            color: 'black',\n                            textAlign: 'center'\n                          }}\n                          value={meta.group}\n                          onChange={e => handleMetadataChange(idx, 'group', e.target.value)}\n                        />\n                      </td>\n                      <td style={{ verticalAlign: 'middle' }}>{replicate}</td>\n                      <td style={{ verticalAlign: 'middle' }}>{editingVal}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            {results && (\n              <p style={{ fontSize: '0.85rem' }}>\n                <a onClick={exportToCSV} style={{ cursor: 'pointer', color: '#C00000', textDecoration: 'underline' }}>\n                  Export to CSV\n                </a>\n              </p>\n            )}\n          </div>\n\n          {results && (\n            <div className=\"column is-half\" style={{ minHeight: '400px' }}>\n              <Bar data={results} options={chartOptions(results.chartMax)} />\n            </div>\n          )}\n        </div>\n      )}\n\n      {processingStatus && <p>{processingStatus}</p>}\n      {error && <div className=\"has-text-danger\">{error}</div>}\n    </div>\n  );\n};\n\nexport default Analysis;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}