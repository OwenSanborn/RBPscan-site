function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

//note: Huge credit and thanks go to IsaacLuo from whose python repository this code was adapted
// https://github.com/IsaacLuo/SnapGeneFileReader
import bufferpack from "bufferpack";
import { StringDecoder } from "string_decoder";
import getArrayBufferFromFile from "./utils/getArrayBufferFromFile";
import createInitialSequence from "./utils/createInitialSequence";
import validateSequenceArray from "./utils/validateSequenceArray";
import flattenSequenceArray from "./utils/flattenSequenceArray";
import { get } from "lodash";
import { XMLParser } from "fast-xml-parser";
import extractFileExtension from "./utils/extractFileExtension";

var Buffer = require("buffer/").Buffer;

function snapgeneToJson(_x, _x2) {
  return _snapgeneToJson.apply(this, arguments);
}

function _snapgeneToJson() {
  _snapgeneToJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(fileObj, options) {
    var _ret;

    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (options === void 0) {
              options = {};
            }

            _context4.prev = 1;
            return _context4.delegateYield( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
              // eslint-disable-next-line no-inner-declarations
              var read = function read(size, fmt) {
                var buffer = Buffer.from(arrayBuffer.slice(offset, size + offset));
                offset += size;

                if (fmt) {
                  var decoder = new StringDecoder(fmt);
                  var toRet = decoder.write(buffer);
                  return toRet;
                } else {
                  return buffer;
                }
              }; // eslint-disable-next-line no-inner-declarations


              var unpack = /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(size, mode) {
                  var buffer, unpacked;
                  return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return read(size);

                        case 2:
                          buffer = _context.sent;
                          _context.next = 5;
                          return bufferpack.unpack(">" + mode, buffer);

                        case 5:
                          unpacked = _context.sent;

                          if (!(unpacked === undefined)) {
                            _context.next = 8;
                            break;
                          }

                          return _context.abrupt("return", undefined);

                        case 8:
                          _context.next = 10;
                          return unpacked[0];

                        case 10:
                          return _context.abrupt("return", _context.sent);

                        case 11:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function unpack(_x3, _x4) {
                  return _ref.apply(this, arguments);
                };
              }();

              var returnVal, arrayBuffer, ext, isProtein, offset, length, title, data, next_byte, block_size, props, binaryRep, size, xml, b, name, description;
              return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      returnVal = createInitialSequence(options);
                      _context3.next = 3;
                      return getArrayBufferFromFile(fileObj);

                    case 3:
                      arrayBuffer = _context3.sent;
                      ext = extractFileExtension(options.fileName);
                      isProtein = options.isProtein;

                      if (ext && /^(prot)$/.test(ext)) {
                        isProtein = true;
                        options.isProtein = true;
                      }

                      offset = 0;
                      _context3.next = 10;
                      return read(1);

                    case 10:
                      _context3.next = 12;
                      return unpack(4, "I");

                    case 12:
                      length = _context3.sent;
                      _context3.next = 15;
                      return read(8, "ascii");

                    case 15:
                      title = _context3.sent;

                      if (!(length !== 14 || title !== "SnapGene")) {
                        _context3.next = 18;
                        break;
                      }

                      throw new Error("Wrong format for a SnapGene file !");

                    case 18:
                      _context3.t0 = _extends;
                      _context3.t1 = {};
                      _context3.t2 = returnVal.parsedSequence;
                      _context3.t3 = isProtein;
                      _context3.next = 24;
                      return unpack(2, "H");

                    case 24:
                      _context3.t4 = !!_context3.sent;

                      if (!_context3.t4) {
                        _context3.next = 27;
                        break;
                      }

                      _context3.t4 = !isProtein;

                    case 27:
                      _context3.t5 = _context3.t4;
                      _context3.next = 30;
                      return unpack(2, "H");

                    case 30:
                      _context3.t6 = _context3.sent;
                      _context3.next = 33;
                      return unpack(2, "H");

                    case 33:
                      _context3.t7 = _context3.sent;
                      _context3.t8 = [];
                      _context3.t9 = {
                        isProtein: _context3.t3,
                        isDNA: _context3.t5,
                        exportVersion: _context3.t6,
                        importVersion: _context3.t7,
                        features: _context3.t8
                      };
                      _context3.next = 38;
                      return (0, _context3.t0)(_context3.t1, _context3.t2, _context3.t9);

                    case 38:
                      data = _context3.sent;

                    case 39:
                      if (!(offset <= arrayBuffer.byteLength)) {
                        _context3.next = 80;
                        break;
                      }

                      _context3.next = 42;
                      return read(1);

                    case 42:
                      next_byte = _context3.sent;
                      _context3.next = 45;
                      return unpack(4, "I");

                    case 45:
                      block_size = _context3.sent;

                      if (!(ord(next_byte) === 21 || ord(next_byte) === 0)) {
                        _context3.next = 61;
                        break;
                      }

                      _context3.next = 49;
                      return unpack(1, "b");

                    case 49:
                      props = _context3.sent;
                      binaryRep = dec2bin(props);
                      data.circular = isFirstBitA1(binaryRep);
                      size = block_size - 1;

                      if (!(size < 0)) {
                        _context3.next = 55;
                        break;
                      }

                      return _context3.abrupt("return", {
                        v: void 0
                      });

                    case 55:
                      data.size = isProtein ? size * 3 : size; //   data["dna"] = {
                      //     topology="circular" if props & 0x01 else "linear",
                      //     strandedness="double" if props & 0x02 > 0 else "single",
                      //     damMethylated=props & 0x04 > 0,
                      //     dcmMethylated=props & 0x08 > 0,
                      //     ecoKIMethylated=props & 0x10 > 0,
                      //     length=block_size - 1
                      //   }

                      _context3.next = 58;
                      return read(size, "utf8");

                    case 58:
                      data.sequence = _context3.sent;
                      _context3.next = 78;
                      break;

                    case 61:
                      if (!(ord(next_byte) === 10)) {
                        _context3.next = 65;
                        break;
                      }

                      return _context3.delegateYield( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                        var strand_dict, xml, b, _b$Features, _b$Features$Feature, Feature;

                        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                          while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                //   # READ THE FEATURES
                                strand_dict = {
                                  0: ".",
                                  1: "+",
                                  2: "-",
                                  3: "="
                                };
                                _context2.next = 3;
                                return read(block_size, "utf8");

                              case 3:
                                xml = _context2.sent;
                                b = new XMLParser({
                                  ignoreAttributes: false,
                                  attributeNamePrefix: "",
                                  isArray: function isArray(name) {
                                    return name === "Feature" || name === "Segment";
                                  }
                                }).parse(xml);
                                _b$Features = b.Features;
                                _b$Features = _b$Features === void 0 ? {} : _b$Features;
                                _b$Features$Feature = _b$Features.Feature, Feature = _b$Features$Feature === void 0 ? [] : _b$Features$Feature;
                                data.features = [];
                                Feature.forEach(function (feat) {
                                  var directionality = feat.directionality,
                                      _feat$Segment = feat.Segment,
                                      Segment = _feat$Segment === void 0 ? [] : _feat$Segment,
                                      name = feat.name,
                                      type = feat.type;
                                  var color;
                                  var maxStart = 0;
                                  var maxEnd = 0;
                                  var locations = Segment && Segment.map(function (seg) {
                                    if (!seg) throw new Error("invalid feature definition");
                                    var range = seg.range;
                                    color = seg.color;

                                    var _getStartAndEndFromRa = getStartAndEndFromRangeString(range),
                                        start = _getStartAndEndFromRa.start,
                                        end = _getStartAndEndFromRa.end;

                                    start = isProtein ? start * 3 : start;
                                    end = isProtein ? end * 3 + 2 : end;
                                    maxStart = Math.max(maxStart, start);
                                    maxEnd = Math.max(maxEnd, end);
                                    return {
                                      start: start,
                                      end: end
                                    };
                                  });
                                  data.features.push(_extends({
                                    name: name,
                                    type: type
                                  }, (locations === null || locations === void 0 ? void 0 : locations.length) > 1 && {
                                    locations: locations
                                  }, {
                                    strand: strand_dict[directionality],
                                    start: maxStart,
                                    end: maxEnd // color,

                                  }));
                                });

                              case 10:
                              case "end":
                                return _context2.stop();
                            }
                          }
                        }, _callee2);
                      })(), "t10", 63);

                    case 63:
                      _context3.next = 78;
                      break;

                    case 65:
                      if (!(ord(next_byte) === 6)) {
                        _context3.next = 76;
                        break;
                      }

                      _context3.next = 68;
                      return read(block_size, "utf8");

                    case 68:
                      xml = _context3.sent;
                      b = new XMLParser({}).parse(xml);
                      name = get(b, "Notes.CustomMapLabel");

                      if (name) {
                        data.name = name;
                      }

                      description = get(b, "Notes.Description");

                      if (description && typeof description === "string") {
                        data.description = description.replace("<html><body>", "").replace("</body></html>", ""); //fixes https://github.com/TeselaGen/ve-sequence-parsers/issues/225
                      }

                      _context3.next = 78;
                      break;

                    case 76:
                      _context3.next = 78;
                      return read(block_size);

                    case 78:
                      _context3.next = 39;
                      break;

                    case 80:
                      returnVal.parsedSequence = data;
                      return _context3.abrupt("return", {
                        v: validateSequenceArray(flattenSequenceArray([returnVal], options), options)
                      });

                    case 82:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3);
            })(), "t0", 3);

          case 3:
            _ret = _context4.t0;

            if (!(typeof _ret === "object")) {
              _context4.next = 6;
              break;
            }

            return _context4.abrupt("return", _ret.v);

          case 6:
            _context4.next = 12;
            break;

          case 8:
            _context4.prev = 8;
            _context4.t1 = _context4["catch"](1);
            console.error("Error trying to parse file as snapgene:", _context4.t1);
            return _context4.abrupt("return", [{
              success: false,
              messages: ["Import Error: Invalid File"]
            }]);

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[1, 8]]);
  }));
  return _snapgeneToJson.apply(this, arguments);
}

function getStartAndEndFromRangeString(rangestring) {
  var _rangestring$split = rangestring.split("-"),
      start = _rangestring$split[0],
      end = _rangestring$split[1];

  return {
    start: start - 1,
    end: end - 1
  };
}

function ord(string) {
  //  discuss at: http://locutus.io/php/ord/
  // original by: Kevin van Zonneveld (http://kvz.io)
  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)
  // improved by: Brett Zamir (http://brett-zamir.me)
  //    input by: incidence
  //   example 1: ord('K')
  //   returns 1: 75
  //   example 2: ord('\uD800\uDC00'); // surrogate pair to create a single Unicode character
  //   returns 2: 65536
  var str = string + "";
  var code = str.charCodeAt(0);

  if (code >= 0xd800 && code <= 0xdbff) {
    // High surrogate (could change last hex to 0xDB7F to treat
    // high private surrogates as single characters)
    var hi = code;

    if (str.length === 1) {
      // This is just a high surrogate with no following low surrogate,
      // so we return its value;
      return code; // we could also throw an error as it is not a complete character,
      // but someone may want to know
    }

    var low = str.charCodeAt(1);
    return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
  }

  if (code >= 0xdc00 && code <= 0xdfff) {
    // Low surrogate
    // This is just a low surrogate with no preceding high surrogate,
    // so we return its value;
    return code; // we could also throw an error as it is not a complete character,
    // but someone may want to know
  }

  return code;
}

export default snapgeneToJson;

function dec2bin(dec) {
  return (dec >>> 0).toString(2);
}

function isFirstBitA1(num) {
  return Number(num.toString().split("").pop()) === 1;
}